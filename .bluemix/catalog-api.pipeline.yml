---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${CATALOG_API_REPO}
  triggers:
  - type: commit
  properties:
  - name: LOGICAL_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: master
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  jobs:
  - name: Build
    type: builder
  - name: Unit Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_upload_results
    APPLICATION_NAME: ${CF_APP_NAME}
    ENVIRONMENT: master
    LIFE_CYCLE_STAGE_SELECT: unittest
    ADDITIONAL_LIFE_CYCLE_STAGE_SELECT: code
    LOG_FILE: tests/server/mochatest.json
    ADDITIONAL_LOG_FILE: tests/server/coverage/reports/coverage-summary.json
    COMMAND: |-
      #!/bin/bash
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        npm install -g npm@3.7.2 ### work around default npm 2.1.1 instability
        npm install
        grunt dev-test-cov --no-color -f --gruntfile $GRUNTFILE --base .
      else
        echo "$GRUNTFILE not found."
      fi
  - name: Gate
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_devops_gate
    CRITERIA: Store Unit Test and Code Coverage Checks
    APPLICATION_NAME: ${CF_APP_NAME}
    ENVIRONMENT: master
- name: DEV
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: LOGICAL_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: ${DEV_SPACE_NAME}
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${DEV_REGION_ID}
      organization: ${DEV_ORG_NAME}
      space: ${DEV_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      # Push app
      export CF_APP_NAME="dev-$CF_APP"
      cf push "${CF_APP_NAME}"
      export APP_URL=http://$(cf app $CF_APP_NAME | grep urls: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent
  - name: Functional Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_upload_results
    APPLICATION_NAME: ${CF_APP_NAME}
    ENVIRONMENT: ${DEV_SPACE_NAME}
    LIFE_CYCLE_STAGE_SELECT: fvt
    ADDITIONAL_LIFE_CYCLE_STAGE_SELECT: none
    LOG_FILE: tests/fvt/mochafvttest.json
    COMMAND: |-
      #!/bin/bash
      export CATALOG_API_TEST_SERVER=$APP_URL
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        npm install -g npm@3.7.2 ### work around default npm 2.1.1 instability
        npm install
        grunt dev-fvt --no-color --gruntfile $GRUNTFILE --base .
      else
        echo "$GRUNTFILE not found."
      fi
- name: TEST
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: SAUCE_USERNAME
    value: {{test.parameters.username}}
    type: text
  - name: SAUCE_ACCESS_KEY
    value: {{test.parameters.key}}
    type: text
  - name: LOGICAL_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: ${QA_SPACE_NAME}
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  - name: HOST
    value: ondemand.saucelabs.com
    type: text
  - name: PORT
    value: '80'
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${QA_REGION_ID}
      organization: ${QA_ORG_NAME}
      space: ${QA_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      # Push app
      export CF_APP_NAME="test-$CF_APP"
      cf push "${CF_APP_NAME}"
      # View logs
      #cf logs "${CF_APP_NAME}" --recent
  - name: Sauce Labs Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.saucelabs
    services:
      - ${SAUCE_LABS}
    target:
      region_id: ${QA_REGION_ID}
      organization: ${QA_ORG_NAME}
      space: ${QA_SPACE_NAME}
    DL_ASSETS: 'false'
    SELECT_CMD: custom
    COMMAND: |-
      #!/bin/bash
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        npm install
        echo $APP_URL | grep "stage1"
        if [ $? -eq 0 ]; then
          grunt test_fake --gruntfile $GRUNTFILE --base .
        else
          grunt test_real --gruntfile $GRUNTFILE --base .
        fi
      else
        echo "$GRUNTFILE not found."
      fi
    enable_tests: true
    test_file_pattern: '*.xml'
  - name: Functional Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_upload_results
    APPLICATION_NAME: ${CF_APP_NAME}
    LIFE_CYCLE_STAGE_SELECT: fvt
    ADDITIONAL_LIFE_CYCLE_STAGE_SELECT: none
    LOG_FILE: xunit.xml
    COMMAND: |-
      #!/bin/bash
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        npm install
        echo $APP_URL | grep "stage1"
        if [ $? -eq 0 ]; then
          grunt test_fake --gruntfile $GRUNTFILE --base .
        else
          grunt test_real --gruntfile $GRUNTFILE --base .
        fi
      else
        echo "$GRUNTFILE not found."
      fi
    ENVIRONMENT: ${QA_SPACE_NAME}
- name: PROD
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: LOGICAL_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: ${PROD_SPACE_NAME}
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  jobs:
  - name: Blue/Green Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      if ! cf app $CF_APP; then  
        cf push $CF_APP
      else
        OLD_CF_APP=${CF_APP}-OLD-$(date +"%s")
        rollback() {
          set +e  
          if cf app $OLD_CF_APP; then
            cf logs $CF_APP --recent
            cf delete $CF_APP -f
            cf rename $OLD_CF_APP $CF_APP
          fi
          exit 1
        }
        set -e
        trap rollback ERR
        cf rename $CF_APP $OLD_CF_APP
        cf push $CF_APP
        cf delete $OLD_CF_APP -f
      fi
